plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.adapter"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures{
        viewBinding true
        dataBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation 'androidx.annotation:annotation:1.3.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.4.1")


    // jsoup HTML parser library @ https://jsoup.org/
    implementation 'org.jsoup:jsoup:1.14.3'


    //noinspection GradleCompatible
//    implementation 'com.android.support:design:27.1.1'

//    fragment
    implementation "androidx.fragment:fragment-ktx:1.4.1"
//
//    navigation fragment
//    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
//    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    //lifecycle + viewModel + LiveData
//    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
//    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    //coroutine
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
//
//    //Room
    def room_version = "2.3.0"
    //noinspection GradleDependency
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    //noinspection GradleDependency
    implementation "androidx.room:room-ktx:$room_version"

    //dagger hilt
//    implementation "com.google.dagger:hilt-android:$hilt_version"
//    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
//
    // Retrofit + GSON
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.1"


    def lifecycle_version = "2.4.0"
    def arch_version = "2.1.0"

    // ViewModel
    //noinspection GradleDependency
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    //noinspection GradleDependency
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"
//
//    implementation "androidx.fragment:fragment-ktx:1.4.1"


//    def roomVersion = "2.3.0"
//
//    implementation("androidx.room:room-runtime:$roomVersion")
////    annotationProcessor("androidx.room:room-compiler:$roomVersion")
//
//    // To use Kotlin annotation processing tool (kapt)
//    kapt("androidx.room:room-compiler:$roomVersion")
////    // To use Kotlin Symbolic Processing (KSP)
////    ksp("androidx.room:room-compiler:$roomVersion")
//
//    // optional - Kotlin Extensions and Coroutines support for Room
//    implementation("androidx.room:room-ktx:$roomVersion")
//
////    // optional - RxJava2 support for Room
////    implementation("androidx.room:room-rxjava2:$roomVersion")
//
////    // optional - RxJava3 support for Room
////    implementation("androidx.room:room-rxjava3:$roomVersion")
//
////    // optional - Guava support for Room, including Optional and ListenableFuture
////    implementation("androidx.room:room-guava:$roomVersion")
//
//    // optional - Test helpers
//    testImplementation("androidx.room:room-testing:$roomVersion")

//    // optional - Paging 3 Integration
//    implementation("androidx.room:room-paging:2.4.0-rc01")

    def nav_version = "2.3.5"

    // Kotlin
    //noinspection GradleDependency
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    //noinspection GradleDependency
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

//     Feature module Support
    //noinspection GradleDependency
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

//
//    def paging_version = "3.1.0"
//
//    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    implementation("com.google.dagger:hilt-android:2.38.1")
    kapt("com.google.dagger:hilt-android-compiler:2.38.1")

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.2"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}